<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <title>Three.js 三層平面圖 Debug 版</title>
  <style>
    body { margin: 0; overflow: hidden; background: #111; }
  </style>
</head>
<body>
<script type="module">
import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js';
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/controls/OrbitControls.js';

  // === 場景 ===
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0x111111);

  // === 相機 ===
  const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 5000);
  camera.position.set(500, 500, 500);
  camera.lookAt(0, 0, 0);

  // === 渲染器 ===
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // === 控制器 ===
  const controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;

  // === 光源 ===
  scene.add(new THREE.AmbientLight(0xffffff, 0.8));
  const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);
  dirLight.position.set(300, 500, 300);
  scene.add(dirLight);

  // === 網格地板 (1000x1000) ===
  const grid = new THREE.GridHelper(1000, 20, 0x444444, 0x222222);
  scene.add(grid);

  // === 坐標軸輔助線 ===
  const axes = new THREE.AxesHelper(300);
  scene.add(axes);

  // === 三層假地板 ===
  const colors = [0x33aaff, 0x33ffaa, 0xffaa33];
  const heights = [0, 100, 200];

  for (let i = 0; i < 3; i++) {
    const geo = new THREE.PlaneGeometry(800, 800);
    const mat = new THREE.MeshBasicMaterial({
      color: colors[i],
      transparent: true,
      opacity: 0.4,
      side: THREE.DoubleSide
    });
    const floor = new THREE.Mesh(geo, mat);
    floor.rotation.x = -Math.PI / 2;
    floor.position.y = heights[i];
    scene.add(floor);
  }

  // === 測試立方體在中央 ===
  const box = new THREE.Mesh(
    new THREE.BoxGeometry(50, 50, 50),
    new THREE.MeshNormalMaterial()
  );
  box.position.set(0, 25, 0);
  scene.add(box);

  // === 自動調整視窗 ===
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  // === 動畫 ===
  function animate() {
    requestAnimationFrame(animate);
    box.rotation.y += 0.01;
    controls.update();
    renderer.render(scene, camera);
  }
  animate();
</script>
</body>
</html>
