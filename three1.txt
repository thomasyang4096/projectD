<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <title>3D 三層平面圖 - 防呆版</title>
  <style>
    body { margin: 0; overflow: hidden; background: #222; }
  </style>
</head>
<body>
<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/controls/OrbitControls.js"></script>

<script>
  // === 場景、相機、渲染器 ===
  const scene = new THREE.Scene();
  scene.background = new THREE.Color(0x222222);

  const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.set(0, 150, 300);

  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  const controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.enableDamping = true;

  // === 燈光 ===
  const light = new THREE.DirectionalLight(0xffffff, 1);
  light.position.set(100, 200, 100);
  scene.add(light);

  // === 地板設定 ===
  const floorFiles = [
    { file: 'floor1.svg', height: 0,   color: 0x33aaff },
    { file: 'floor2.svg', height: 30,  color: 0x33ffaa },
    { file: 'floor3.svg', height: 60,  color: 0xffaa33 }
  ];

  const textureLoader = new THREE.TextureLoader();

  floorFiles.forEach((f, i) => {
    // 建立預設材質（有顏色）
    let material = new THREE.MeshBasicMaterial({
      color: f.color,
      transparent: true,
      opacity: 0.5,
      side: THREE.DoubleSide
    });

    // 嘗試載入圖片，如果成功就用圖片當貼圖
    textureLoader.load(
      f.file,
      (texture) => {
        material.map = texture;
        material.opacity = 0.9;
        material.needsUpdate = true;
      },
      undefined,
      (error) => {
        console.warn(`⚠️ 無法載入 ${f.file}，使用顏色地板代替`);
      }
    );

    const plane = new THREE.Mesh(new THREE.PlaneGeometry(200, 200), material);
    plane.rotation.x = -Math.PI / 2;
    plane.position.y = f.height;
    scene.add(plane);
  });

  // === 自動調整視窗大小 ===
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  // === 主動畫迴圈 ===
  function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
  }
  animate();
</script>
</body>
</html>
