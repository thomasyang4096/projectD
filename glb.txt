<!DOCTYPE html>
<html lang="zh-TW">
<head>
<meta charset="UTF-8">
<title>GLB + 箭頭 + 光暈球</title>
<style> body { margin:0; overflow:hidden; background:#111; } </style>

<script type="importmap">
{
  "imports": {
    "three": "https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js",
    "three/examples/": "https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/"
  }
}
</script>
</head>
<body>
<script type="module">
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/controls/OrbitControls.js';
import { GLTFLoader } from 'three/examples/loaders/GLTFLoader.js';

// === 場景、相機、渲染器 ===
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x111111);
const camera = new THREE.PerspectiveCamera(60, window.innerWidth/window.innerHeight, 0.1, 5000);
camera.position.set(5, 5, 5);

const renderer = new THREE.WebGLRenderer({ antialias:true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// === 控制器 ===
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// === 光源 ===
scene.add(new THREE.AmbientLight(0xffffff, 0.7));
const dirLight = new THREE.DirectionalLight(0xffffff, 1);
dirLight.position.set(10, 10, 10);
scene.add(dirLight);

// === 輔助工具 ===
scene.add(new THREE.GridHelper(10, 10));
scene.add(new THREE.AxesHelper(2));

// === 載入 GLB 模型 ===
const loader = new GLTFLoader();
loader.load('3d/abc.glb', (gltf) => {
    const model = gltf.scene;
    scene.add(model);

    // -------------------------------
    // 加紅色箭頭
    // -------------------------------
    const from = new THREE.Vector3(0,0,0);
    const dir = new THREE.Vector3(0,1,0).normalize();
    const length = 2;
    const color = 0xff0000;
    const arrow = new THREE.ArrowHelper(dir, from, length, color);
    model.add(arrow);
    arrow.position.set(0,0.5,0);

    // -------------------------------
    // 在箭頭頂端加光暈球 (多層半透明球)
    // -------------------------------
    const glowGroup = new THREE.Group();
    const baseRadius = 0.3;
    for(let i=0; i<4; i++){
        const geo = new THREE.SphereGeometry(baseRadius, 32, 32);
        const mat = new THREE.MeshBasicMaterial({
            color: 0x00ff00,
            transparent: true,
            opacity: 0.4 / (i+1),
            blending: THREE.AdditiveBlending,
            depthWrite: false
        });
        const mesh = new THREE.Mesh(geo, mat);
        mesh.scale.setScalar(1 + i*0.5);
        glowGroup.add(mesh);
    }
    arrow.add(glowGroup);
    glowGroup.position.set(0, 2, 0);
    arrow.userData.glowGroup = glowGroup;
});

// === 視窗調整 ===
window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// === 動畫迴圈 ===
let pulse = 0;
function animate() {
    requestAnimationFrame(animate);
    pulse += 0.05;

    // 光暈呼吸閃爍
    scene.traverse(obj => {
        if(obj.userData.glowGroup){
            obj.userData.glowGroup.children.forEach((mesh, idx)=>{
                mesh.scale.setScalar( (1 + idx*0.5) * (1 + Math.sin(pulse)/5) );
                mesh.material.opacity = 0.4/(idx+1) + Math.sin(pulse)/10;
            });
        }
    });

    controls.update();
    renderer.render(scene, camera);
}
animate();

</script>
</body>
</html>
