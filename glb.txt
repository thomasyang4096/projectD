<!DOCTYPE html>
<html lang="zh-TW">
<head>
<meta charset="UTF-8">
<title>GLB + 箭頭動態 + glowGroup 光暈</title>
<style>
  body { margin: 0; overflow: hidden; background: #111; }
</style>

<script type="importmap">
{
  "imports": {
    "three": "https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.module.js",
    "three/examples/": "https://cdn.jsdelivr.net/npm/three@0.160.0/examples/jsm/"
  }
}
</script>
</head>
<body>
<script type="module">
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/controls/OrbitControls.js';
import { GLTFLoader } from 'three/examples/loaders/GLTFLoader.js';

// === 基本設定 ===
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x111111);
const camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 5000);
camera.position.set(5, 5, 5);

const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

// === 光源 ===
scene.add(new THREE.AmbientLight(0xffffff, 0.7));
const dirLight = new THREE.DirectionalLight(0xffffff, 1);
dirLight.position.set(10, 10, 10);
scene.add(dirLight);

scene.add(new THREE.GridHelper(10, 10));
scene.add(new THREE.AxesHelper(2));

// === 載入 GLB 模型 ===
let arrow; // 用來儲存箭頭物件
const loader = new GLTFLoader();
loader.load('3d/abc.glb', (gltf) => {
  const model = gltf.scene;
  scene.add(model);

  // 紅色箭頭
  const from = new THREE.Vector3(0, 0, 0);
  const dir = new THREE.Vector3(0, 1, 0).normalize();
  const length = 2;
  arrow = new THREE.ArrowHelper(dir, from, length, 0xff3333);
  model.add(arrow);
  arrow.position.set(0, 0.5, 0);

  // === 在箭頭頂端加光暈 ===
  const glowGroup = new THREE.Group();
  const baseRadius = 0.3;
  for (let i = 0; i < 4; i++) {
    const geo = new THREE.SphereGeometry(baseRadius, 32, 32);
    const mat = new THREE.MeshBasicMaterial({
      color: 0x00ff00,
      transparent: true,
      opacity: 0.4 / (i + 1),
      blending: THREE.AdditiveBlending,
      depthWrite: false,
    });
    const mesh = new THREE.Mesh(geo, mat);
    mesh.scale.setScalar(1 + i * 0.5);
    glowGroup.add(mesh);
  }
  arrow.add(glowGroup);
  glowGroup.position.set(0, 2, 0);
  arrow.userData.glowGroup = glowGroup;
});

// === 動畫 ===
let pulse = 0;
function animate() {
  requestAnimationFrame(animate);
  pulse += 0.05;

  // 光暈呼吸效果
  scene.traverse(obj => {
    if (obj.userData.glowGroup) {
      const group = obj.userData.glowGroup;
      const breath = 1 + Math.sin(pulse) * 0.15; // scale 變化幅度

      group.children.forEach((mesh, idx) => {
        // 每層微幅擴張收縮
        mesh.scale.setScalar((1 + idx * 0.5) * breath);

        // 改用顏色亮度來呈現閃爍
        const hsl = { h: 0.33, s: 1.0, l: 0.4 + Math.sin(pulse + idx) * 0.2 };
        mesh.material.color.setHSL(hsl.h, hsl.s, hsl.l);
      });
    }
  });

  // 箭頭沿著 Y 軸方向來回移動
  if (arrow) {
    const amplitude = 0.2; // 移動幅度
    const speed = 2.0;     // 移動速度
    const offset = Math.sin(pulse * speed) * amplitude;
    arrow.position.y = 0.5 + offset;
  }

  controls.update();
  renderer.render(scene, camera);
}
animate();

// === 視窗調整 ===
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});
</script>
</body>
</html>
